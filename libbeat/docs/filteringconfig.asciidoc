//////////////////////////////////////////////////////////////////////////
//// This content is shared by all Elastic Beats. Make sure you keep the
//// descriptions here generic enough to work for all Beats that include
//// this file. When using cross references, make sure that the cross
//// references resolve correctly for any files that include this one.
//// Use the appropriate variables defined in the index.asciidoc file to
//// resolve Beat names: beatname_uc and beatname_lc.
//// Use the following include to pull this content into a doc file:
//// include::../../libbeat/docs/filteringconfig.asciidoc[]
//// Make sure this content appears below a level 2 heading.
//////////////////////////////////////////////////////////////////////////

[[configuration-filter]]
=== Processors Configuration (was Filters)

//TODO: Remove was Filters from the above title and remove extra sections that show the alpha4 configuration

coming[5.0.0-beta1,Filters are being renamed to "processors" to better reflect the capabilities they provide. If you are using 5.0.0-alpha4 or earlier, these are still called "filters" even though the documentation refers to "processors"]

You can define a set of `processors` in the +{beatname_lc}.yml+ config file to reduce the number
of fields that are exported by the Beat. 

If multiple processors are defined, they are executed in the order they are defined. The initial event is passed to the
first processor and what results from it is passed to the second processor until all processors are applied. The
condition is checked against the event that is received as input and it might differ from the original event.

[source,yaml]
-------
event -> processor 1 -> event1 -> processor 2 -> event2 ...
-------

See <<exported-fields>> for the full list of possible fields.

Each processor receives a condition and optionally a set of arguments. The action is executed only if the condition
is fulfilled. If no condition is passed then the action is always executed.

deprecated[5.0.0-alpha4,The `filters` section is being renamed to `processors` in 5.0.0-beta1. Therefore the following configuration is deprecated]

[source,yaml]
------
filters:
 - action1:
     condition1
         [arguments]
 - action2:
     condition2
         [arguments]
...
------

coming[5.0.0-beta1,Begin using the following configuration starting with 5.0.0-beta1]

[source,yaml]
------
processors:
 - action1:
     when:
        condition1
           [arguments]
 - action2:
     when:
        condition2
           [arguments]
...

------

See <<filtering-data>> for specific {beatname_uc} examples.

[[filtering-condition]]
==== Condition

Each condition receives a field to compare or multiple fields under the same condition and then `AND` is used between
them. You can see a list of the <<exported-fields,`exported fields`>>. 

For each field, you can specify a simple field name or a nested map, for example `dns.question.name`.

[source,yaml]
----
condition:
  field1: value1
  [field2: value2]
  ...
----

Supported conditions are:

* <<condition-equals,`equals`>>
* <<condition-contains,`contains`>>
* <<condition-regexp,`regexp`>>
* <<condition-range, `range`>>


[[condition-equals]]
===== equals

With the `equals` condition, you can compare if a field has a certain value. The condition accepts only an integer or a string
value.

For example, the following condition checks if the response code of the HTTP transaction is 200:

[source,yaml]
-------
equals:
  http.code: 200
-------

[[condition-contains]]
===== contains

The `contains` condition checks if a value is part of the field. The condition accepts only a string value.

For example, the following condition checks if an error is part of the transaction status:

[source,yaml]
------
contains:
  status: "Specific error"
------


[[condition-regexp]]
===== regexp

The `regexp` condition checks the field against a regular expression. The condition accepts only strings.

For example, the following condition checks if the process name contains `foo`:

[source,yaml]]
-----
reqexp:
  proc.name: "foo.*"
-----

[[condition-range]]
===== range

The `range` condition checks if the field is in a certain range of values. The condition supports `lt`, `lte`, `gt` and `gte`. The
condition accepts only integer or float values.

For example, the following condition checks for the status of the transaction by comparing the `proc.code` field with
300.


[source,yaml]
------
range:
  gte:
    proc.code: 300
------

NOTE: The `range` condition accepts only one `gte`, one `gt`, one `lt` and one `lte` condition.

For example, the following condition checks if the CPU usage in percentage has a value between 0.5 and 0.8.

[source,yaml]
------
range:
  gte:
    cpu.user_p: 0.5
  lt:
    cpu.user_p: 0.8
------

==== Actions

The supported filter actions are:

 * <<include-fields,`include_fields`>>
 * <<drop-fields,`drop_fields`>>
 * <<drop-event,`drop_event`>>


[[include-fields]]
===== include_fields

The `include_fields` action specifies what fields to export if a certain condition is fulfilled. The condition is
optional and if it's missing then the defined fields are always exported. The `@timestamp` and
`type` fields are always exported, even if they are not defined in the `include_fields` list.

deprecated[5.0.0-alpha4,The `filters` section is being renamed to `processors` in 5.0.0-beta1. Therefore the following configuration is deprecated]

[source,yaml]
-------
filters:
 - include_fields:
     [condition]
     fields: ["field1", "field2", ...]
-------

coming[5.0.0-beta1,Begin using the following configuration starting with 5.0.0-beta1]

[source,yaml]
-------
processors:
 - include_fields:
     when:
        condition
     fields: ["field1", "field2", ...]
-------

You can specify multiple `include_fields` actions under the `processors` section.


NOTE: If you define an empty list of fields under `include_fields`, then only the required fields, `@timestamp` and `type`, are
exported.


[[drop-fields]]
===== drop_fields

The `drop_fields` action specifies what fields to drop if a certain condition is fulfilled. The condition is optional
and if it's missing then the defined fields are always dropped. The `@timestamp` and `type` fields cannot be dropped,
even if they show up in the `drop_fields` list.

deprecated[5.0.0-alpha4,The `filters` section is being renamed to `processors` in 5.0.0-beta1. Therefore the following configuration is deprecated]

[source,yaml]
-----------------------------------------------------
filters:
 - drop_fields:
     [condition]
     fields: ["field1", "field2", ...]
-----------------------------------------------------

coming[5.0.0-beta1,Begin using the following configuration starting with 5.0.0-beta1]

[source,yaml]
-----------------------------------------------------
processors:
 - drop_fields:
     when:
        condition
     fields: ["field1", "field2", ...]
-----------------------------------------------------

NOTE: If you define an empty list of fields under `drop_fields`, then no fields are dropped.


[[drop-event]]
===== drop_event

The `drop_event` action drops the entire event if the associated condition is fulfilled. The condition is mandatory, as
without one all the events are dropped.

deprecated[5.0.0-alpha4,The `filters` section is being renamed to `processors` in 5.0.0-beta1. Therefore the following configuration is deprecated]

[source,yaml]
------
filters:
 - drop_event:
     condition
------

coming[5.0.0-beta1,Begin using the following configuration starting with 5.0.0-beta1]

[source,yaml]
------
processors:
 - drop_event:
     when:
        condition
------

